JAVA 
4/3/2025
# data type 
- Primitive data type (single value)
	- int 
	- float	- float f = 2.5f;
	- double - double d = 2.5;
	- long  
	- short
	- char 
	- byte
	- Boolean
- non-primitive data type (number of data can be stored)
	-array
	-String


# Operators 
-Arithmetic Operator (+,-,*,/,%) 
-Logical Operator (and && , or ||)
-Relational Operator/Assignment Operator (=, <,>)
-Comparative Operator (==, !=, <=, >=)
-ternary operator (condition ? true : false) 

22/4/2025

class variable = static variable 
instance variable = global variable


static variable, block, method (No object creation)

#Encapsulation
Process of wrapping code and data together into a single unit.
class{ Methods { variables } }	

Advantages 
- helps to protect data and control access to it.
- object oriented 
- protects sensitive data
- hides unnecessary data from the user of a class.


* Getter and Setter Methods
Getter method is used to read the value of a private variable.
Setter method is used to modify the value of a private variable.

* this keyword 
used to refer instance variable 

# Constructor 
a block of codes like the method 
It is called when an instance of the class is created.
special type of method which is used to initialize the object. 
Types - Default 
	- Parameterized Constructor

Constructor overloading - same name different parameter 

23/4/2025

#Inheritance
~ is-a relation  (parent to child) top-down data flow
~ has-a relation (child to parent) bottom-up data flow 

Types

single-level (single class single inheritance)
multi-level  (a->b->c)
multiple     (one class extending two parent    not allowed by java ambiguity problem to solve this interface)
hierarchical (one parent inherited in multiple child classes)
hybrid       (combination of two)

Superclass/ Base class/ Parent class / Ancestor class / Generic class 
Subclass/ Derived class/ Child class/ Descendant class / Specialized class 


overriding - method is inherited in child class and changes are made in child class it is overriding.

constructor cannot override.

28/4/2025

# Access Modifiers

public
private 
prohibited 
default 


Modifier		Same Class	Same Package	Subclass (other package)	Other Package
public	 		✅		✅		✅				✅
protected		✅		✅		✅				❌ (only via inheritance)
default (no modifier)	✅		✅		❌				❌
private			✅		❌		❌				❌

# Polymorphism

single action in different ways 
types - Compile-time Polymorphism
      - Runtime Polymorphism


# final keyword

variable 
class (No inheritance)
methods 


2/5/2025

#Inner class - class inside class
class A
{
	class B
	{

	}
}

A obj = new A();

#Abstraction - hiding methods

3/5/2025
#Interface - complete abstraction in java 
Loosely coupled - independent of object

Class - Class = extends
Interface - Class = implements
Interface - Interface = extends

Multiple inheritance:
	class B implements A,X

Use default keyword for implementing method in interface (not recommended to write method in interface)

# Loosely coupled


5/5/25

Wrapper class

// int , double, boolean, byte, char, short, long, float
// Integer, Double, Boolean, Byte, Char, Short, Long, Float


# Collection framework

	* ArrayList
		List<Integer> list = new ArrayList<>();
		
		list.add(10) // add value
		list.remove(2) //Index number
		
		
	* HashSet
		Set<Integer> list = new HashSet<Integer>();
		
	* TreeSet
		Set<Integer> list = new TreeSet<Integer>();
		
	* LinkedHashSet
		Set<Integer> list = new LinkedHashSet<Integer>();
		
	* Queue
		Queue<Integer> q = new PriorityQueue<Integer>();
		
	* HashMap
		Map
		
		
# DBMS - is a software to managing database
  Database - is group of entities
  
  
# Task 1

# creating department table
CREATE TABLE department (
    dept_no INT PRIMARY KEY,
    dname VARCHAR(50),
    location VARCHAR(50)
);

INSERT INTO department (dept_no, dname, location) VALUES
(10, 'accounting', 'new york'),
(20, 'research', 'Dallas'),
(30, 'sales', 'chicago'),
(40, 'operations', 'boston');

		
# creating employee table
CREATE TABLE employee (
    empno INT PRIMARY KEY,
    ename VARCHAR(50),
    job VARCHAR(30) NOT NULL,
    mgr INT NOT NULL,
    hire_date DATE NOT NULL,
    salary DECIMAL(10,2) NOT NULL,
    comm DECIMAL(10,2),
    dept_no INT,
    FOREIGN KEY (dept_no) REFERENCES department(dept_no)
        ON DELETE CASCADE
);

INSERT INTO employee VALUES
(7369, 'smith', 'clerk', 7902, '1980-12-17', 800, NULL, 20),
(7499, 'allen', 'salesman', 7698, '1981-02-20', 1600, 300, 30),
(7521, 'ward', 'salesman', 7698, '1981-02-22', 1250, 500, 30),
(7566, 'jones', 'manager', 7839, '1981-04-02', 2975, NULL, 20),
(7654, 'martin', 'salesman', 7698, '1981-09-28', 1250, 1400, 30),
(7698, 'blake', 'manager', 7839, '1981-05-01', 2850, NULL, 30),
(7782, 'clark', 'manager', 7839, '1981-06-09', 2450, NULL, 10),
(7788, 'scott', 'analyst', 7566, '1987-07-13', 3000, NULL, 20),
(7839, 'king', 'president', 0, '1981-11-17', 5000, NULL, 10),
(7844, 'turner', 'salesman', 7698, '1981-09-08', 1500, 0, 30),
(7876, 'adams', 'clerk', 7788, '1987-07-13', 1100, NULL, 20),
(7900, 'james', 'clerk', 7698, '1981-12-03', 950, NULL, 30),
(7902, 'ford', 'analyst', 7566, '1981-12-03', 3000, NULL, 20),
(7934, 'miller', 'clerk', 7782, '1982-01-23', 1250, NULL, 10);


# creating payroll table

CREATE VIEW payroll_view AS
SELECT 
    empno,
    ename AS emp_name,
    job AS designation,
    salary AS basic_salary,
    
    salary * 0.20 AS DA,
    salary * 0.10 AS TA,
    5000 AS CCA,
    salary * 0.10 AS MEDICAL,
    
    salary * 0.05 AS PF,
    salary * 0.05 AS GPF,
    salary * 0.02 AS LIC,
    
    salary + (salary * 0.20) + (salary * 0.10) + 5000 + (salary * 0.10) AS GROSS_SAL+ARY,
    (salary * 0.05) + (salary * 0.05) + (salary * 0.02) AS TOTAL_DEDUCTIONS,
    
    (salary + (salary * 0.20) + (salary * 0.10) + 5000 + (salary * 0.10)) -
    ((salary * 0.05) + (salary * 0.05) + (salary * 0.02)) AS NET_SALARY

FROM employee;


# view payroll
SELECT * FROM payroll_view;

		
		
# Task 2

CREATE TABLE students (
    roll_no INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    branch VARCHAR(30),
    year INT,
    cgpa DECIMAL(4,2),
    college_name VARCHAR(100),
    location VARCHAR(50)
);

INSERT INTO students VALUES
(1, 'Amit', 'CSE', 2, 8.5, 'Kaveri College', 'Pune'),
(2, 'Riya', 'IT', 1, 8.9, 'Kaveri College', 'Pune'),
(3, 'Sohan', 'MECH', 3, 7.8, 'Kaveri College', 'Pune'),
(4, 'Priya', 'CIVIL', 4, 7.2, 'Kaveri College', 'Pune'),
(5, 'Rahul', 'EEE', 2, 9.1, 'Kaveri College', 'Pune'),
(6, 'Sneha', 'ECE', 1, 8.7, 'Kaveri College', 'Pune'),
(7, 'Arjun', 'CSE', 3, 9.0, 'Kaveri College', 'Pune'),
(8, 'Pooja', 'IT', 2, 8.3, 'Kaveri College', 'Pune'),
(9, 'Vivek', 'CSE', 4, 6.9, 'Kaveri College', 'Pune'),
(10, 'Divya', 'MECH', 3, 7.4, 'Kaveri College', 'Pune'),
(11, 'Manoj', 'CIVIL', 2, 7.6, 'Kaveri College', 'Pune'),
(12, 'Anita', 'EEE', 1, 9.2, 'Kaveri College', 'Pune'),
(13, 'Harsh', 'ECE', 4, 8.1, 'Kaveri College', 'Pune'),
(14, 'Kavya', 'CSE', 2, 8.8, 'Kaveri College', 'Pune'),
(15, 'Neha', 'IT', 1, 9.0, 'Kaveri College', 'Pune'),
(16, 'Aditya', 'MECH', 3, 7.5, 'Kaveri College', 'Pune'),
(17, 'Isha', 'CIVIL', 2, 8.2, 'Kaveri College', 'Pune'),
(18, 'Rakesh', 'EEE', 4, 7.9, 'Kaveri College', 'Pune'),
(19, 'Komal', 'ECE', 1, 9.3, 'Kaveri College', 'Pune'),
(20, 'Anil', 'CSE', 2, 8.6, 'Kaveri College', 'Pune');


1. WHERE clause – students with CGPA > 8.5:

	SELECT * FROM students WHERE cgpa > 8.5;

2. ORDER BY – top scorers first:

	SELECT name, cgpa FROM students ORDER BY cgpa DESC;
	
3. GROUP BY – count of students in each branch:

	SELECT branch, COUNT(*) AS student_count FROM students GROUP BY branch;
	
	
	
Task 3
	

CREATE TABLE employees (
    empid INT PRIMARY KEY,
    name VARCHAR(100),
    salary DECIMAL(10, 2),
    design VARCHAR(50),
    join_date DATE
);


CREATE TABLE customer_details (
    acc INT PRIMARY KEY,
    type VARCHAR(50),
    open_date DATE,
    balance DECIMAL(10, 2),
    custId INT,
    mobile_number VARCHAR(15),
    bank_name VARCHAR(100), 
    FOREIGN KEY (custId) REFERENCES employees(empid)
);


CREATE TABLE product_details (
    pid INT PRIMARY KEY,
    pname VARCHAR(100),
    cost DECIMAL(10, 2),
    mfg DATE,
    warranty INT 
);


INSERT INTO employees (empid, name, salary, design, join_date)
VALUES
(1, 'John Doe', 50000, 'Manager', '2015-05-01'),
(2, 'Jane Smith', 75000, 'Senior Developer', '2017-06-15'),
(3, 'Sara Johnson', 120000, 'Lead Developer', '2019-08-20'),
(4, 'Tom Williams', 95000, 'Developer', '2020-02-10'),
(5, 'Emily Davis', 35000, 'HR Manager', '2016-07-18'),
(6, 'Michael Brown', 120000, 'CTO', '2018-04-12'),
(7, 'Lucas Harris', 55000, 'Developer', '2021-01-25'),
(8, 'Olivia Martinez', 70000, 'Senior Designer', '2020-11-30'),
(9, 'David Clark', 95000, 'Project Manager', '2019-03-22'),
(10, 'Sophia Lee', 150000, 'CEO', '2015-12-05');



INSERT INTO customer_details (acc, type, open_date, balance, custId, mobile_number, bank_name)
VALUES
(1001, 'Saving', '2022-01-01', 25000.00, 1, '7071234567', 'SBI'),
(1002, 'Current', '2020-07-25', 500000.00, 2, '7359876543', 'HDFC'),
(1003, 'Saving', '2021-03-12', 12000.00, 3, '7895432100', 'SBI'),
(1004, 'Current', '2023-08-14', 20000.00, 4, '7156781234', 'HDFC'),
(1005, 'Saving', '2021-05-19', 17500.00, 5, '7263841729', 'SBI'),
(1006, 'Current', '2022-11-08', 96000.00, 6, '7584923021', 'HDFC'),
(1007, 'Saving', '2020-08-14', 27500.00, 7, '7934703126', 'SBI'),
(1008, 'Current', '2023-03-02', 56000.00, 8, '7134560298', 'HDFC'),
(1009, 'Saving', '2021-09-27', 88000.00, 9, '7028361745', 'SBI'),
(1010, 'Current', '2022-12-14', 40000.00, 10, '7109236784', 'HDFC');


INSERT INTO product_details (pid, pname, cost, mfg, warranty)
VALUES
(101, 'Laptop', 60000.00, '2016-02-01', 12),
(102, 'Smartphone', 35000.00, '2017-05-15', NULL),
(103, 'Tablet', 15000.00, '2020-01-10', 24),
(104, 'Smartwatch', 5000.00, '2018-03-21', NULL),
(105, 'Headphones', 3000.00, '2019-08-30', 18),
(106, 'Monitor', 12000.00, '2021-11-10', 36),
(107, 'Keyboard', 2000.00, '2022-01-15', 24),
(108, 'Mouse', 1000.00, '2021-06-25', NULL),
(109, 'Speaker', 8000.00, '2022-03-05', 12),
(110, 'Charger', 1500.00, '2020-09-10', NULL);



SELECT acc AS account_no, type AS account_type, balance
FROM customer_details
WHERE custId IN (
    SELECT empid
    FROM employees
    WHERE salary BETWEEN 10000 AND 100000
);


SELECT * FROM product_details
WHERE mfg >= '2016-01-01';


SELECT * FROM product_details
WHERE warranty IS NULL;


SELECT * FROM customer_details
WHERE mobile_number LIKE '7%' OR mobile_number LIKE '8%' OR mobile_number LIKE '9%';

 
SELECT * FROM customer_details
WHERE bank_name IN ('SBI', 'HDFC');

	  